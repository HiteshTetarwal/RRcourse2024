---
title: "Viewership Analysis of Suits"
author: "Hitesh Kumar Tetarwal 455361"
date: "`r Sys.Date()`"
format: html
---

# Introduction

*Suits* is an American legal drama television series that revolves around talented college dropout Mike Ross, who starts working as a law associate for Harvey Specter despite never attending law school. The series aired on USA Network from June 23, 2011, to September 25, 2019.

# Viewership Data Extraction

The viewership data for each episode of *Suits* is extracted from Wikipedia.

```{python}
import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt

# URL of the Wikipedia page
url = "https://en.wikipedia.org/wiki/List_of_Suits_episodes"

# Fetch the webpage
response = requests.get(url)

# Parse the page using BeautifulSoup
soup = BeautifulSoup(response.content, 'html.parser')

# Find all tables with class 'wikitable'
tables = soup.find_all('table', {'class': 'wikitable'})

# Extract the first table to a dataframe
viewership_df = pd.read_html(str(tables[1]))[0]  # Adjust index based on the right table

# Print the column names to check and adjust if necessary
print(viewership_df.columns)

# Rename columns if the names are different
if 'No. overall' in viewership_df.columns:
    viewership_df.rename(columns={'No. overall': 'Episode', 'U.S. viewers(millions)': 'Viewers'}, inplace=True)
elif 'No.' in viewership_df.columns:
    viewership_df.rename(columns={'No.': 'Episode', 'U.S. viewers(millions)': 'Viewers'}, inplace=True)
else:
    raise ValueError("Expected column for episode number not found in the data.")

# Convert viewers column to numeric, removing any unwanted characters
viewership_df['Viewers'] = pd.to_numeric(viewership_df['Viewers'].str.extract('(\d+\.\d+)')[0])

# Plotting the viewership data
plt.figure(figsize=(10, 5))
plt.plot(viewership_df['Episode'], viewership_df['Viewers'], marker='o', linestyle='-')
plt.title('Viewership Trends of Suits Across Episodes')
plt.xlabel('Episode Number')
plt.ylabel('Viewers (millions)')
plt.grid(True)
plt.show()
